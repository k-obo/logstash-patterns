# Test Parse : Unified JVM Logging 

input {
    file {
        mode => "tail"
        path => ["/var/tmp/*.log"]
        sincedb_path => "/dev/null"
        start_position => "beginning"
        codec => plain { 
            charset => "UTF-8"
        }
    }
}

filter {
    grok {
        patterns_dir => "/usr/share/logstash/config/patterns"
        match => { "message" => "^%{GC_LOG}$" }
    }
    if [gc][message] {
        grok {
            patterns_dir => "/usr/share/logstash/config/patterns"
            match => {"[gc][message]" => "^%{GC_PAUSE}$"}
            match => {"[gc][message]" => "^%{GC_CONCURRET}$"}
            match => {"[gc][message]" => "^%{RG_USAGE}$"}
            match => {"[gc][message]" => "^%{DEBUG_GC}$"}
            match => {"[gc][message]" => "^%{DEBUG_CLASSSPACE}$"}
            match => {"[gc][message]" => "^%{DEBUG_METASPACE}$"}
            match => {"[gc][message]" => "^%{DEBUG_REGION}$"}
            match => {"[gc][message]" => "^%{DEBUG_G1_HEAP}$"}
            match => {"[gc][message]" => "^%{DEBUG_HEAP}$"}
            match => {"[gc][message]" => "^%{AGE_SUMMARY}$"}
            match => {"[gc][message]" => "^%{AGE_TABLE}$"}
            match => {"[gc][message]" => "^%{AGE_DETAIL}$"}
            match => {"[gc][message]" => "^%{METASPACE_USAGE}$"}
            match => {"[gc][message]" => "^%{CPU_USAGE}$"}
            match => {"[gc][message]" => "^%{PHASES_MESSAGE}$"}
            match => {"[gc][message]" => "^%{TASK_MESSAGE}$"}
            tag_on_failure => ["grokparsefailure_gc"]
        }
    } else if [gc][other] {
        grok {
            patterns_dir => "/usr/share/logstash/config/patterns"
            match => {"[gc][other]" => "^%{METASPACE_CDS}$"}
            match => {"[gc][other]" => "^%{METASPACE_KLASS}$"}
            match => {"[gc][other]" => "^%{METASPACE_ARCHIVE}$"}
            match => {"[gc][other]" => "^%{SAFEPOINT_USAGE}$"}
            match => {"[gc][other]" => "^%{DEBUG_CLASSSPACE}$"}
            match => {"[gc][other]" => "^%{DEBUG_METASPACE}$"}
            match => {"[gc][other]" => "^%{DEBUG_REGION}$"}
            match => {"[gc][other]" => "^%{DEBUG_G1_HEAP}$"}
            match => {"[gc][other]" => "^%{PARAM_MESSAGE}$"}
            tag_on_failure => ["grokparsefailure_other"]
        }
    }
    mutate {
        remove_field => [ "host", "event", "log" ]
#        remove_field => [ "message" ]
    }
}

output {
    if [gc][message] {
        if "grokparsefailure_gc" in [tags] {
            stdout {
                codec => line { format => "[GC] Parse failed: %{[gc][message]}"}
            }
        } else {
#            stdout {
#                codec => line { format => "[GC] Parse success: %{[gc][message]}"}
#            }
        }
    } else if [gc][other] {
        if "grokparsefailure_other" in [tags] {
            stdout {
                codec => line { format => "[Other] Parse failed: %{[gc][other]}"}
            }
        } else {
#            stdout {
#                codec => line { format => "[Other] Parse success: %{[gc][other]}"}
#            }
        }
    }
#    elasticsearch {
#         hosts => "localhost:9200"
#         user => "logstash_internal"
#         password => ""
#    }
}
